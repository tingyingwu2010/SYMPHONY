******************************************************************************
*                    SYMPHONY CNRP Application                               * 
******************************************************************************

The SYMPHONY CNRP application is a solver for Capacitated Node
Routing Problems as described in the following technical report:

T.K.R., M.J. Saltzman, and M.M. Wiecek, An Improved Algorithm for Biobjective
Integer Programming and Its Application to Network Routing Problems, Lehigh
University Industrial and Systems Engineering Technical Report 04T-004,
available for download from

http://www.lehigh.edu/~tkr2/research/papers/BICRIT.pdf.

The CNRP application takes advantage of SYMPHONY's ability to solve bicriteria
optimization problems and can analyze the tradeoff between fixed and variable
cost in a class of network routing applications that include variants of the
Traveling Salesman Problem, Vehicle Routing Problem, Capacitated Minimum
Spanning Tree Problem, and Cable Trench Problem.

*******************************************************************************
*COMPILING THE SYMPHONY CNRP APPLICATION (Unix) *
*******************************************************************************

First, configure and compile SYMPHONY as described in SYMPHONY/README. Modify
the variables in the CNRP/Makefile appropriately. In particular, you must set
the path to SYMPHONY itself. If the application is unpacked as a subdirectory
of SYMPHONY subdirectory, no further modification should be necessary. Typing
"make" in the CNRP subdirectory should successfully make the executable
"cnrp". It will be installed in the directory
SYMPHONY/Applications/CNRP/bin/$(ARCH)/$(LP\_SOLVER). See usage below.

*******************************************************************************
*            COMPILING THE SYMPHONY CNRP APPLICATION (Windows)                *
*******************************************************************************

Here is a sketch outline of how to compile the SYMPHONY CNRP
application in Microsoft Windows. For information on developing your own
applications, please see the quick start guide below or the detailed
explanation in the user's manual. Direct support is provided for compilation
under MS Visual Studio 6.0. Compilation for other compilers should also be
possible. Note that the Windows version has some limitations. Detailed timing
information is not currently provided.  Support is only provided for running
in sequential mode at this time.

You have two options. You can either compile on the command-line, using
the MSVC++ makefile CNRP\src\WIN32\cnrp.mak or you can use the provided
projects and workspaces. Compiling on the command-line is somewhat easier
since it requires only editing the makefile and typing a single command.

******************** Using the NMAKE Utility *********************************

1. Edit the file CNRP\src\WIN32\cnrp.mak to reflect your
environment. This involves specifying the LP solver to be used and various
paths. Only minor edits should be required. An explanation of what has to be
set is contained in the comments in the makefile.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries, available from www.coin-or.org. Specifically, you should
install OSI, CGL, and the Coin utilities (in the COIN/Coin directory). If you
want to use the COIN LP solver, you should also download CLP. These can be
downloaded from www.coin-or.org. The path to the COIN libraries must be
specified in CNRP\src\WIN32\cnrp.mak.

3. If you wish to read GMPL/AMPL files, you will have to install the Gnu
Linear Programming Kit (GLPK), which contains a parser for GMPL/AMPL
files. The path to the GLPK libraries must be specified in the makefile.

4. Once configuration is done, type "nmake /f cnrp.mak" in the
CNRP\src\WIN32 directory. The executable "cnrp.exe" will be
created in the CNRP\src\WIN32\Debug directory.

5. To test the executable, type "cnrp.exe -F ..\..\..\sample.cnrp -T CTP" at a
command prompt from the CNRP\src\WIN32\Debug directory.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace 
SYMPHONY\Applications\CNRP\src\WIN32\cnrp.dsw.
Note that there are two projects, one called "cnrp" and the other called 
"symphonyLib". The "symphonyLib" project compiles the source code, with the 
calls to the user-defined callbacks used to customize the solver, to create 
the callable library: "symphonyLib.lib". The "cnrp" project compiles those 
user callbacks together with the main and the application functions, links 
them with the callable library and creates the executable: "cnrp.exe".

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries. Specifically, you should install OSI, CGL, CLP and the Coin
utilities (in the COIN/Coin directory). These can be downloaded from 
www.coin-or.org. The default location for COIN is C:\COIN\.

3. By default, SYMPHONY is set to use the OSI CLP interface. To see this
check the following settings:

-- "__OSI_CLP__" is defined in the preprocessor definitions of both
"symphonyLib" and "cnrp" projects (right-click on one of the
projects, and then choose Settings --> C/C++ --> Preprocessor in the category
drop-down menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI_CLP, and
CLP are specified in the same settings window as for the preprocessor
definitions. Note that, the Coin, OSI, OSI_CLP and CLP include directories are
assumed to be in C:\COIN\Coin, C:\COIN\Osi, C:\COIN\Osi\OsiClp and
C:\COIN\Clp directories, respectively. If they are not,
make sure that you have set the correct paths in both projects before
compiling.

-- The "cnrp" project is dependent on the "symphonyLib" project (see the
dependencies in Project --> Dependencies) and it includes the necessary
libraries: "symphonyLib", "osiClpLib", "osiLib", "coinLib" and "clpLib" 
(solver library).

If you want to use another solver:

-- If you want to use the solver again through the OSI interface, change the 
preprocessor definition in both projects from "__OSI_CLP__" to "__OSI_XXX__", 
where "XXX" is replaced by the desired solver's acronym ("__OSI_CPLEX__", 
"__OSI_GLPK__", "__OSI_OSL__", etc.). Otherwise, change it to either  
"__CPLEX__" or "__OSL__" in both projects since SYMPHONY is able to use 
CPLEX and OSL solvers directly.

-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_CPLEX__", define C:\COIN\Osi\OsiCpx and 
"C:\ILOG\cplex81\include\ilcplex" (assuming CPLEX is installed here) as the 
solver's include files path definitions or if you want to use "__OSI_OSL__", 
define C:\COIN\Osi\OsiOsl and C:\ProgramFiles\IbmOslV3Lib\osllib (assuming 
OSL is installed here) instead of the OSI CLP and CLP path definitions.
If you want to use the native CPLX or OSL interface directly, delete all the 
path definitions (you are not required to have COIN and OSI), and just add the
path definitions for the CPLEX or OSL include files.

-- Add the appropriate libraries to the "cnrp" project. For instance, if
you want to use "__OSI_OSL__", then add the "osiOslLib" and "oslmd6030" 
(OSL solver library) files after deleting "osiClpLib" and "clpLib" 
dependencies from the project. If you want to use the native OSL interface, 
then delete all the libraries (except the "symphonyLib") and just add the 
"oslmd6030" library for it is the unique solver library we need now.

4. By default, SYMPHONY is also set to use the COIN CGL library for
generating cuts. To use CGL, the "symphonyLib" project has the "ADD_CGL_CUTS"
preprocessor definition and the path to C:\COIN\Cgl\ (be sure that this path
directs SYMPHONY to the include directory of CGL). If you also don't want to 
use the CGL library, simply delete the "ADD_CGL_CUTS" preprocessor definition, 
the path definition for the CGL include files and the "cglLib" library from 
the "cnrp" project.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: when using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
SYMPHONY/Makefile, a Unix-style makefile included with the
distribution. To enable the functionality associated with a particular
definition, simply add it to the list of definitions, as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the directory
containing "cnrp.exe" or add the path to the "PATH" Windows environment
variable.

8. Once you have the proper settings for your LP solver, choose "Build
cnrp.exe" from the Build menu. This should successfully build the
executable.

9. To test the executable, right click on the "cnrp" project, go to the
"Debug" tab and set the program arguments to "-F ..\..\sample.cnrp -T CTP"
Note that command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.

*******************************************************************************
*                      USING THE SOLVER                                       *
*******************************************************************************

This file briefly introduces the use of the SYMPHONY CNRP solver. To use the
CNRP solver, type the executable name followed by one or more of the
command-line switches. There are two required switches. You must specify the
location of the data file by using "-F 'filename'" (type this after executable
name) and you must specify the type of the problem by "-T". Below is a list 
of other parameters that can be set on the command line. This list can also
be obtained by typing the executable name followed by "-H".  Notice that all 
application-specific parameters are denoted by a capital letter.

        -H: help
        -E: use sparse edge set
        -D level: verbosity level for displaying LP solutions
        -T type: specify problem type
        -S file: load sparse graph from 'file'
        -F file: problem data is in 'file'
        -B i: which candidates to check in strong branching
        -V i: how to construct the base set of variables
        -K k: use 'k' closest edges to build sparse graph
        -N n: use 'n' routes
        -M  : use min cut subroutine
        -C c: use capacity 'c'
        -X t: toggles generation of X cuts
        -Y t: toggles generation of capacity cuts
        -Z t: toggles generation of tight capacity cuts
        -G t: set tau to 't'

There are a number of other (for now) undocumented parameters that can be used
to fine-tune the performance of the solver. These must be set in a parameter
file. The SYMPHONY User's Manual explains the use of the parameter file.

Some of SYMPHONY's native parameters can also be set on the command
line. Below is a list of these parameters. This list can also be obtained by
typing the executable name with no command-line arguments. Note that all
SYMPHONY parameters are denoted by a lowercase letter. Note that there are
dozens of other parameters that can be set with the use of a parameter
file. These parameters are listed in the SYMPHONY User's Manual.

        -h: help
        -a: no cut timeout
        -d: enable graph drawing
        -g: use cut generator
        -r: do repricing in root
        -t: trim the tree
        -b: don't perform branch and cut
        -u ub: use upper bound 'ub'
        -p procs: allow 'procs' active nodes
        -n i: use node selection rule 'i'
        -v i: set verbosity to level 'i'
        -s cands: use 'cands' candidates for strong branching
        -c i: use rule 'i' to compare candidates
        -k i: use rule 'i' to select child
        -m n: allow a max of 'n' cuts to enter per iteration
        -l n: allow a max of 'n' cut pools
        -i n: allow a max of 'n' iterations in presolve
        -f file: read parameters from parameter file 'file'

AUTHORS

The SYMPHONY CNRP application was developed by Ted Ralphs
(tkralphs@lehigh.edu).

BUG REPORTS

Please send bug reports to tkralphs@lehigh.edu.
