SYMPHONY MATCH-5.1 APPLICATION INSTALLATION
==========================================

******************************************************************************
*              COMPILING THE SYMPHONY MATCH APPLICATION (Unix)               *
******************************************************************************

First, configure and compile SYMPHONY as described in SYMPHONY/README.
Modify the variables in the MATCH/Makefile appropriately. In particular, you
must set the path to SYMPHONY itself. If the application is unpacked as a
subdirectory of SYMPHONY/Applications subdirectory, no further modification 
should be necessary. Typing "make" in the MATCH subdirectory should 
successfully make the executable "match". It will be installed in the directory
bin/$(ARCH)/$(LP_SOLVER). Otherwise, you must also set the path to
the application's files. See usage below.

******************************************************************************
*            COMPILING THE SYMPHONY MATCH APPLICATION (Windows)              *
******************************************************************************

Here is a sketch outline of how to compile the SYMPHONY MATCH application in
Microsoft Windows. Direct support is provided for compilation under MS Visual
Studio 6.0. Compilation for other compilers should also be possible. Note that
the Windows version has some limitations. Detailed timing information is not
currently provided. Support is only provided for running in sequential mode at
this time.

There are two options. You can either compile on the command-line, using
the MSVC++ makefile, src\WIN32\match.mak, or you can use the provided projects 
and workspaces. However for the second option, it is important the MATCH 
archive be unpacked in the SYMPHONY subdirectory or the project files will not 
work. Compiling on the command-line is somewhat easier since it requires only 
editing the makefile and typing a single command.

******************** Using the NMAKE Utility *********************************

1. Edit the src\WIN32\match.mak makefile to reflect your environment. 
This involves specifying the LP solver to be used, assigning some 
variables and setting various paths. Only minor edits should be required. 
An explanation of what has to be set is contained in the comments in the 
makefile.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries, available from www.coin-or.org and with the latest 
SYMPHONY distribution. By default, SYMPHONY is set to use COIN LP solver, CLP, 
COIN Open Solver Interface, OSI, and COIN Cut Generation Library, CGL. To keep 
this configuration, you should install OSI, CGL, CLP and additionally, the 
Coin utilities (under COIN\Coin). The path to the COIN libraries, unless you 
want to use the included package, must be specified in the makefile.

3. Once configuration is done, type "nmake /f match.mak" in the src\WIN32 
directory. The executable "match.exe" will be created in the src\WIN32\Debug 
directory.

5. To test the executable, type "match.exe -F ..\..\..\sample.mat" at a command
prompt from the src\WIN32\Debug directory.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace src\WIN32\match.dsw.
Note that there are two projects, one called "match" and the other called 
"symphonyLib". The "symphonyLib" project compiles the source code with the 
calls to the user-defined callbacks used to customize the solver to create the 
callable library: "symphonyLib.lib". The "match" project compiles those 
user callbacks together with the main function, links them with the callable 
library and creates the executable: "match.exe".

2. To use many of the new capabilities of SYMPHONY, you must have
the COIN project files. Specifically, you should have OSI, CGL, CLP and the 
Coin utilities (in the COIN/Coin subdirectory). These can be downloaded from 
www.coin-or.org or can be found in the latest SYMPHONY distribution. Current
workspace is set to use the COIN packages included in the SYMPHONY repository. 
You will need to reload the needed COIN projects if you want to use another 
COIN distribution.

3. By default, SYMPHONY is set to use the OSI CLP interface. To see this
check the following settings:

-- "__OSI_CLP__" is defined in the preprocessor definitions of both
"symphonyLib" and "match" projects (right-click on one of the projects, and 
then choose Settings --> C/C++ --> Preprocessor in the category drop-down 
menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI_CLP, and
CLP are specified in the same settings window as for the preprocessor
definitions. Note that, the Coin, OSI, OSI_CLP and CLP include directories are
assumed to be in ..\..\..\..\COIN\,i.e., COIN is assumed to be in SYMPHONY 
subdirectory. If it is not, make sure that you have set the correct paths in 
both projects before compiling.

-- The "match" project is dependent on the "symphonyLib", "coinLib", 
"osiLib", "osiClpLib", "clpLib" projects (see the dependencies in Project --> 
Dependencies). 

If you want to use another solver:

-- If you want to use the solver again through the OSI interface, change the 
preprocessor definition in both projects from "__OSI_CLP__" to "__OSI_XXX__", 
where "XXX" is replaced by the desired solver's acronym ("__OSI_CPLEX__", 
"__OSI_GLPK__", "__OSI_OSL__", etc.). Otherwise, change it to either  
"__CPLEX__" or "__OSL__" in both projects since SYMPHONY is able to use 
CPLEX and OSL solvers directly.


-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_CPLEX__", define "..\..\..\..\COIN\Osi\OsiCpx" and 
"C:\ILOG\cplex81\include\ilcplex" (assuming CPLEX is installed here) as the 
solver's header files path definitions or if you want to use "__OSI_OSL__", 
define "..\..\..\..\COIN\Osi\OsiOsl" and "C:\ProgramFiles\IbmOslV3Lib\osllib" 
(assuming OSL is installed here) instead of the OSI CLP and CLP path 
definitions.

If you want to use the native CPLX or OSL interface directly, delete all the 
path definitions (you are not required to have COIN and OSI), and just add the
path definitions for the CPLEX or OSL include files.

-- Add the appropriate projects and libraries. For instance, if you want to 
use "__OSI_OSL__", then add "osiOslLib" project to the workspace and 
"oslmd6030", OSL solver library, to the "cnrp" project after deleting 
"osiClpLib" and "clpLib" projetcs. Update the dependencies. If you want to use 
the native OSL interface, then delete all the projects (except the 
"symphonyLib") and just add the "oslmd6030" library for it is the 
unique solver library we need now.

4. By default, SYMPHONY is also set to use the COIN CGL library for
generating cuts. To use CGL, the workspace includes the "cglLib" project, the 
"symphonyLib" project has the "ADD_CGL_CUTS" preprocessor definition and the 
path to Cgl include directory, "..\..\..\..\COIN\Cgl\include" and the cnrp 
project has a dependency on "cglLib". If you don't want to use the CGL 
library, reverse this procedure and delete the "cglLib" project from the 
workspace.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: when using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
"config", a Unix-style configuration file included in the distribution, under
SYMPHONY subdirectory.  To enable the functionality associated with a 
particular definition, simply add it to the list of definitions, as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the directory
containing "match.exe" or add the path to the "PATH" Windows environment
variable.

8. Once you have the proper settings for your LP solver, choose "Build
match.exe" from the Build menu. This should successfully build the
executable.

9. To test the executable, right click on the "match" project, go to the
"Debug" tab and set the program arguments to "-F ..\..\..\sample.mat" Note that
command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.
