*******************************************************************************
*                COMPILING A SYMPHONY APPLICATION (Unix)                      *
*******************************************************************************

*******************************************************************************
*              COMPILING A SYMPHONY APPLICATION (Windows)                     *
*******************************************************************************
You have two options: 

1- NMAKE Utility:

Open a command window (start-->run-->cmd), configure "spp.mak" file in \WIN32
directory if you need and then type "nmake /f spp.mak" in the same 
directory. The executable "symphony.exe" will be created in \WIN32\Debug 
directory. See "spp.mak" for further detail.

2- MSVC

In order to be able to use the Windows version of SPP application, you have to 
make sure that SPP application is a subdirectory of SYMHONY, strictly as 
..SYMPHONY\SPP. If the application is unpacked outside of the SYMPHONY 
directory, simply copy the SPP directory in to the SYMPHONY directory. 

After that, go into the SPP\WIN32 directory and load the "spp" workspace,
spp.dsw, to the MS Visual Studio. In that case, "symphony" and "spp" projects, 
namely symphony.dsp and spp.dsp, including the related source files will be 
added directly to the workspace. By default, SYMPHONY is set up to use the 
CPLEX optimization solver via the CPLEX interface of COIN_OSI:

- "__OSI_CPLEX__" is defined in the preprocessor definitions of both 
"symphony" and "spp" projects (to see that, right-click on one of 
the projects, and then --> Settings --> C/C++ --> Preprocessor in the Category 
scroll bar).

- paths to the include files of COIN utilities (Coin), OSI, OSI_CPLEX and 
CPLEX are specified in the same settings window we used for the preprocessor 
definitons. Note that, the Coin, OSI and OSI_CPLEX include directories are 
assumed to be in C:\COIN\Coin, C:\COIN\Osi, C:\COIN\Osi\OsiCpx and 
C:\ILOG\cplex81\include\ilcplex directories,respectively, if they are not, 
make sure that you have introduced the correct paths to SYMPHONY in both 
projects before executing. 

- "symphony" project is dependent on "spp" project (see the 
dependencies in Project->Dependencies) and it includes the necessary 
libraries: "spp", "osiCpxLib", "osiLib", "coinLib" and "cplex81" 
(solver library).  

- SYMPHONY is also set up to use the COIN CGL library for generating cuts. For 
that, "symphony" project has the "ADD_CGL_CUTS" preprocessor definiton, the 
path to C:\COIN\Cgl\ (be sure that this path directs SYMPHONY to the 
include directory of CGL) and the "cgllib" library. 

If you want to use another solver, basically:

- change the preprocessor definition from "__OSI_CPLEX__" to "__OSI_XXX__" 
("__OSI_CLP__", "__OSI_GLPK__", "__OSI_OSL__", etc.) if you want to use OSI 
interface to the solver, otherwise, change it to "__XXX__" (you have two 
options: "__CPLEX__" and "__OSL__") in both projects.

- change the path definitions of the include files: for instance, if you want 
to use "__OSI_OSL__", define C:\COIN\OSi\OsiOsl and C:\Program Files\
IbmOslV3Lib\osllib (assuming it is there) instead of OsiCpx and CPLEX path 
definitons or, if you want to use "__OSL__", delete all the path definitions 
since you are not required to have COIN and OSI anymore, and just add the 
path definiton for the OSL include files. 

- add the appropriate libraries to "symphony" project. For instance, 
if you want to use "__OSI_OSL__" then add the osiOslLib and oslmd6030 
(OSL solver lib file) library files after deleting osiCpxLib and cplex81 
libraries from the "symphony" project (you can do that by right_clicking on 
"symphony" project and then --> Add files to project with "library files" type 
selected as the file type) or, if you want to use "__OSL__", then delete all 
the libraries (except the "spp" library ) from the "symphony" project and just 
add the "oslmd6030" library file for it is the unique solver library file we 
need now. 

- If you also don't want to use the CGL library, simply delete the 
"ADD_CGL_CUTS" preprocessor definiton, the CGL path definitons and the 
"cglLib" library from the "symphony" project. 

Now, you are ready to compile the application. Click on "build symphony.exe" 
from the "Build" option in toolbar or just click F7. The executable will be 
created in ..SPP\WIN32\Debug. To run it, you can either specify your arguments 
in the program arguments section (right click on "symphony" project and 
then --> Settings --> Debug. But be careful with your referance location to 
specify the path to the other files to be used in your arguments: you are now 
in ..SPP\WIN32 directory, not in ..SPP\WIN32\Debug) or go in to the 
..SPP\WIN32\Debug directory via a command windows (start-->run-->cmd) and 
type "symphony.exe --arguments". 


*******************************************************************************
*                      USING THE SOLVER                                       *
*******************************************************************************

The set partitioning problem (SPP) is a difficult (NP-complete, large size of 
problems) combinatorial optimization problem mainly applied to scheduling 
problems. SPP can be defined as finding the minimum cost partition of a matrix 
having binary entities where a partition is the union of disjoint subsets to 
cover all the row indices and a subset -associated to each column- consists of 
the row indices if the corresponding entity is 1. 

To run the SPP you are just required to specify the location of the data file 
by typing "-F 'filename'" as an argument after the executable name. The other 
user defined parameters are the following:

		-H: help (user switches)
		-F file: problem instance data is in 'file'

You can also obtain the above list by tying the executable name followed by 
"-H". There are a number of other (for now) undocumented parameters that can 
be used to fine-tune the performance of the solver. These must be set in a 
parameter file. The SYMPHONY User's Manual explains the use of the parameter 
file.

Some of SYMPHONY's native parameters can also be set on the command
line. Below is a list of these parameters. This list can also be obtained by
typing the executable name with no command-line arguments. Note that all
SYMPHONY parameters are denoted by a lowercase letter. Note that there are
dozens of other parameters that can be set with the use of a parameter
file. These parameters are listed in the SYMPHONY User's Manual.

		-h: help
        	-a: no cut timeout
        	-d: enable graph drawing
        	-g: use cut generator
        	-r: do repricing in root
        	-t: trim the tree
        	-b: don't perform branch and cut
        	-u ub: use upper bound 'ub'
        	-p procs: allow 'procs' active nodes
        	-n i: use node selection rule 'i'
        	-v i: set verbosity to level 'i'
        	-s cands: use 'cands' candidates for strong branching
        	-c i: use rule 'i' to compare candidates
        	-k i: use rule 'i' to select child
        	-m n: allow a max of 'n' cuts to enter per iteration
        	-e n: allow a max of 'n' cut pools
        	-l n k: load balance level 'n' and iterations 'k'
        	-i n: allow a max of 'n' iterations in presolve
        	-z n: set diving threshold to 'n'
        	-f file: read parameters from parameter file 'file'

