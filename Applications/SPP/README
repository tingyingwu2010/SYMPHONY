*******************************************************************************
*                     SYMPHONY SPP Application                                * 
*******************************************************************************

The SYMPHONY SPP application solves the standard Set Paritioning Problem. This
application is a pure branch and bound solver and does not utilize
cutting planes. It is simply intended as an illustration of how to develop an
application with SYMPHONY. For a more sophisticated solver, please download
the SYMPHONY SPP+CUTS application. See below for usage.

*******************************************************************************
*              COMPILING THE SYMPHONY SPP APPLICATION (Unix)                  *
*******************************************************************************

This version of the SYMPHONY SPP application is intended to work with
SYMPHONY-4.0. First, configure and compile SYMPHONY 4.0 as described in
SYMPHONY-4.0/README-4.0/.  Download and unpack the source code for the SPP
application from the file SYMPHONY-SPP-4.0.tgz. Modify the variables in the
SPP/Makefile appropriately. In particular, you must set the path to SYMPHONY
itself. If the application is unpacked as a subdirectory of SYMPHONY-4.0
subdirectory, no further modification should be necessary. Typing "make" in
the SPP subdirectory should successfully make the SPP executable. It will be
installed in the directory SYMPHONY-4.0/SPP/bin.$(ARCH)/$(LP\_SOLVER). See
usage below.

*******************************************************************************
*            COMPILING THE SYMPHONY SPP APPLICATION (Windows)                 *
*******************************************************************************

This version of the SYMPHONY SPP application is intended to work with
SYMPHONY-4.0. Here is a sketch outline of how to compile the SYMPHONY SPP
application in Microsoft Windows. For information on developing your own
applications, please see the quick start guide below or the detailed
explanation in the user's manual. Direct support is provided for compilation
under MS Visual Studio 6.0. Compilation for other compilers should also be
possible. Note that the Windows version has some limitations. Detailed timing
information is not currently provided.  Support is only provided for running
in sequential mode at this time.

First, download SYMPHONY-4.0.zip and unzip the archive. This will create a
subdirectory called SYMPHONY-4.0\ containing all the source files. Now
download and unpack SYMPHONY-SPP-4.0.zip in the SYMPHONY-4.0\ subdirectory. It
is important that the SPP source code be unpacked in the SYMPHONY-4.0\
subdirectory or the project files will not work. 

You now have two options. You can either compile on the command-line, using the
MSVC++ makefile SYMPHONY-4.0\WIN32\spp.mak or you can use the provided
projects and workspaces. Compiling on the command-line is somewhat easier
since it requires only editing the makefile and typing a single command.

******** Using the NMAKE Utility ********

1. Edit the file SYMPHONY-4.0\SPP\WIN32\spp.mak to reflect your
environment. This involves specifying the LP solver to be used and various
paths. Only minor edits should be required. An explanation of what has to be
set is contained in the comments in the Makefile.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries, available from www.coin-or.org. Specifically, you should
install OSI, CGL, and the Coin utilities (in the COIN/Coin directory). If you
want to use the COIN LP solver, you should also download CLP. These can be
downloaded from www.coin-or.org. The path to the COIN libraries must be
specified in SYMPHONY-4.0\SPP\WIN32\spp.mak.

3. If you wish to read GMPL/AMPL files, you will have to install the Gnu
Linear Programming Kit (GLPK), which contains a parser for GMPL/AMPL
files. The path to the GLPK libraries must be specified in
SYMPHONY-4.0\SPP\WIN32\spp.mak.

4. Once configuration is done, type "nmake /f spp.mak" in the
SYMPHONY-4.0\SPP\WIN32 directory. The executable "symphony.exe" will be
created in the SYMPHONY-4.0\SPP\WIN32\Debug directory.

5. To test the executable, type "symphony.exe -F ..\..\test.mps" at a command 
prompt from the SYMPHONY-4.0\SPP\WIN32\Debug directory.

******** Using the MSVC++ Workspace ********

1. In MS Visual C++ 6.0, open the workspace SYMPHONY-4.0\SPP\WIN32\spp.dsw.
Note that there are two projects, one called "symphony" and one called "spp".
The symphony project compiles the source of the internal library. The spp
project compiles a separate library containing the spp-defined functions
that can be used to customize the solver. 

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries. Specifically, you should install OSI, CGL, and the Coin
utilities (in the COIN/Coin cirectory). If you want to use the COIN LP solver,
you should also download CLP. These can be downloaded from www.coin-or.org.
The default location for COIN is C:\COIN\.

3. By default, SYMPHONY is set up to use the OSI CPLEX interface. To see this
check the following settings:

-- "__OSI_CPLEX__" is defined in the preprocessor definitions of both
"symphony" and "spp" projects (to see that, right-click on one of the
projects, and then choose Settings --> C/C++ --> Preprocessor in the category
drop-down menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI_CPLEX, and
CPLEX are specified in the same settings window as for the preprocessor
definitons. Note that the Coin, OSI, and OSI_CPLEX include directories are
assumed to be in C:\COIN\Coin, C:\COIN\Osi, C:\COIN\Osi\OsiCpx and
C:\ILOG\cplex81\include\ilcplex directories, respectively. If they are not,
make sure that you have set the correct paths in both projects before
compiling.

-- The "symphony" project is dependent on the "spp" project (see the
dependencies in Project --> Dependencies) and it includes the necessary
libraries: "spp", "osiCpxLib", "osiLib", "coinLib" and "cplex81" (solver
library).

If you want to use the native CPLEX interface (without dowloading COIN) or a
solver other than CPLEX:

-- If you want to use another OSI interface, change the preprocessor
definition from "__OSI_CPLEX__" to "__OSI_XXX__" ("__OSI_CLP__",
"__OSI_GLPK__", "__OSI_OSL__", etc.). Otherwise, change it to "__XXX__" (you
have two options: "__CPLEX__" and "__OSL__") in both projects.

-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_OSL__", define C:\COIN\OSi\OsiOsl and C:\Program
Files\IbmOslV3Lib\osllib (assuming it is installed there) instead of OsiCpx
and CPLEX path definitons. If you want to use the native OSL interface, delete
all the path definitions (you are not required to have COIN or OSI), and just
add the path definiton for the OSL include files.

-- Add the appropriate libraries to the "symphony" project. For instance, if
you want to use "__OSI_OSL__" then add the osiOslLib and oslmd6030 (OSL solver
lib file) library files after deleting osiCpxLib and cplex81 libraries from
the "symphony" project (you can do that by right_clicking on the "symphony"
project and then --> Add files to project with "library files" selected as the
file type). If you want to use the mative OSL interface, then delete all
the libraries (except the "spp" library ) from the "symphony" project and
just add the "oslmd6030" library file for it is the unique solver library file
we need now.

4. By default, SYMPHONY is also set up to use the COIN CGL library for
generating cuts. To use CGL, the "symphony" project has the "ADD_CGL_CUTS"
preprocessor definiton, the path to C:\COIN\Cgl\ (be sure that this path
directs SYMPHONY to the include directory of CGL) and a dependence on the
"cgllib" library. If you also don't want to use the CGL library, simply delete
the "ADD_CGL_CUTS" preprocessor definiton, the CGL path definitons and the
"cglLib" library from the "symphony" project.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: When using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
SYMPHONY-4.0/Makefile, a Unix-style makefile included with the
distribution. To enable the functionality associated with a particular
definition, simply add it to the list of definitions, as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the directory
containing symphony.exe or add the path to the "PATH" Windows environment
variable.

8. Once you have the proper settings for your LP solver, choose "Build
symphony.exe" from the Build menu. This should successfully build the
executable.

9. To test the executable, right click on the symphony project, go to the
"Debug" tab and set the program arguments to "-F test.mps" Note that
command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. I suppose this functionality
should be easy to add -- let me know if you are interested in doing it and I
will give you all the help I can. In addition, the Windows version will only
run in sequential mode for a variety of reasons. However, it should be
relatively easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.

*******************************************************************************
*                      USING THE SOLVER                                       *
*******************************************************************************

The set partitioning problem (SPP) is a difficult (NP-complete, large size of 
problems) combinatorial optimization problem mainly applied to scheduling 
problems. SPP can be defined as finding the minimum cost partition of a matrix 
having binary entities where a partition is the union of disjoint subsets to 
cover all the row indices and a subset -associated to each column- consists of 
the row indices if the corresponding entity is 1. 

To execute the SPP application you are just required to specify the location
of the data file by typing "-F 'filename'" as an argument after the executable
name. There is a sample file called sample.spp that you can try to make sure
the solver is working. More data files may become available. Please check
http://www.branchandcut.org/SPP/ for more information. The other user defined
parameters are the following:

		-H: help (user switches)
		-F file: problem instance data is in 'file'

You can also obtain the above list by tying the executable name followed by 
"-H". There are a number of other (for now) undocumented parameters that can 
be used to fine-tune the performance of the solver. These must be set in a 
parameter file. The SYMPHONY User's Manual explains the use of the parameter 
file.

Some of SYMPHONY's native parameters can also be set on the command
line. Below is a list of these parameters. This list can also be obtained by
typing the executable name with no command-line arguments. Note that all
SYMPHONY parameters are denoted by a lowercase letter. Note that there are
dozens of other parameters that can be set with the use of a parameter
file. These parameters are listed in the SYMPHONY User's Manual.

		-h: help
        	-a: no cut timeout
        	-d: enable graph drawing
        	-g: use cut generator
        	-r: do repricing in root
        	-t: trim the tree
        	-b: don't perform branch and cut
        	-u ub: use upper bound 'ub'
        	-p procs: allow 'procs' active nodes
        	-n i: use node selection rule 'i'
        	-v i: set verbosity to level 'i'
        	-s cands: use 'cands' candidates for strong branching
        	-c i: use rule 'i' to compare candidates
        	-k i: use rule 'i' to select child
        	-m n: allow a max of 'n' cuts to enter per iteration
        	-e n: allow a max of 'n' cut pools
        	-l n k: load balance level 'n' and iterations 'k'
        	-i n: allow a max of 'n' iterations in presolve
        	-z n: set diving threshold to 'n'
        	-f file: read parameters from parameter file 'file'

AUTHORS

The SYMPHONY SPP application was developed by Marta Eso
(meso@hotchkiss.org).

BUG REPORTS

Please send bug reports to symphony-bugs@branchandcut.org.
