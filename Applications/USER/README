******************************************************************************
*               DEVELOPNG A CUSTOMIZED SOLVER USING CALLBACKS                * 
******************************************************************************

To use SYMPHONY's callbacks to develop a customized solver, fill in the stub
functions provided in the files in the SYMPHONY-5.0/USER directory, as
described in the quick start guide below, or in the user's manual. Follow
the instructions below to compile your application.

DOCUMENTATION
=============

Full documentation comes with your distribution in the directory
SYMPHONY-5.0/Doc and can also be downloaded at
ftp://branchandcut.org/pub/reference/. There is a user's guide
(SYMPHONY-5.0-Manual.pdf) that should be read prior to developing an
application.

******************************************************************************
*                 COMPILING A CUSTOM APPLICATION (Unix)                      *
******************************************************************************

This version of the SYMPHONY USER application is intended to work with
SYMPHONY-5.0. First, configure and compile SYMPHONY 5.0 as described in
SYMPHONY-5.0/README-5.0. Download and unpack the source code for the USER
application from the file SYMPHONY-USER-5.0.tgz. Modify the variables in the
USER/Makefile appropriately. In particular, you must set the path to SYMPHONY
itself. If the application is unpacked as a subdirectory of SYMPHONY-5.0
subdirectory, no further modification should be necessary. Typing "make" in
the USER subdirectory should successfully make the USER executable. It will be
installed in the directory SYMPHONY-5.0/USER/bin.$(ARCH)/$(LP\_SOLVER).
Otherwise, you must also set the path to the application's files.

*******************************************************************************
*            COMPILING A CUSTOM APPLICATION (Microsoft Windows)               *
*******************************************************************************

This version of the SYMPHONY USER application is intended to work with
SYMPHONY-5.0. Here is a sketch outline of how to compile the SYMPHONY USER
application in Microsoft Windows. Direct support is provided for compilation
under MS Visual Studio 6.0. Compilation for other compilers should also be
possible. Note that the Windows version has some limitations. Detailed timing
information is not currently provided. Support is only provided for running
in sequential mode at this time.

First, download SYMPHONY-5.0.zip and unzip the archive. This will create a
subdirectory called SYMPHONY-5.0 containing all the source files. Download 
and unpack SYMPHONY-USER-5.0.zip. 

There are two options. You can either compile on the command-line, using
the MSVC++ makefile, USER\WIN32\user.mak, or you can use the 
provided projects and workspaces. However for the second option, it is 
important the USER archive be unpacked in the SYMPHONY-5.0 subdirectory 
or the project files will not work. Compiling on the command-line is somewhat 
easier since it requires only editing the makefile and typing a single command.

******************** Using the NMAKE Utility *********************************

1. Edit the USER\WIN32\user.mak makefile to reflect your environment. This 
involves specifying the LP solver to be used, assigning some variables and 
setting various paths. Only minor edits should be required. An explanation of 
what has to be set is contained in the comments in the makefile.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries, available from www.coin-or.org. By default, SYMPHONY is 
set up to use COIN LP solver, CLP, COIN Open Solver Interface, OSI and
COIN Cut Generation Library, CGL. To keep this configuration, you should 
install OSI, CGL, CLP and the Coin utilities (under COIN\Coin). The path to 
the COIN libraries must be specified in the makefile.

3. If you wish to read GMPL/AMPL files, you will have to install the Gnu
Linear Programming Kit (GLPK), which contains a parser for GMPL/AMPL
files. The path to the GLPK libraries must be specified in the makefile.

4. Once configuration is done, type "nmake /f user.mak" in the USER\WIN32 
directory. The executable "symphony.exe" will be created under the 
USER\WIN32\Debug directory.

5. To test the executable, type "symphony.exe -F ..\..\sample.mps" at a command
prompt from the USER\WIN32\Debug directory. After this point, you will be 
ready to develop your own application by modifying the files in the 
SYMPHONY-5.0/USER directory and it's subdirectories.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace SYMPHONY-5.0\USER\WIN32\user.dsw.
Note that there are two projects, one called "symphony" and one called "user".
The symphony project compiles the source of the internal library. The user
project compiles a separate library containing the user-defined functions that
can be used to customize the solver.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries. Specifically, you should install OSI, CGL, CLP and the Coin
utilities (in the COIN/Coin directory). These can be downloaded from 
www.coin-or.org. The default location for COIN is C:\COIN\.

3. By default, SYMPHONY is set up to use the OSI CLP interface. To see this
check the following settings:

-- "__OSI_CLP__" is defined in the preprocessor definitions of both
"symphony" and "user" projects (right-click on one of the projects, and 
then choose Settings --> C/C++ --> Preprocessor in the category drop-down 
menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI CLP, and
CLP are specified in the same settings window as for the preprocessor
definitions. Note that, the Coin, OSI, OSI_CLP and CLP include directories are
assumed to be in C:\COIN\Coin, C:\COIN\Osi, C:\COIN\Osi\OsiClp and
C:\COIN\Clp directories, respectively. If they are not,
make sure that you have set the correct paths in both projects before
compiling.

-- The "symphony" project is dependent on the "user" project (see the
dependencies in Project --> Dependencies) and it includes the necessary
libraries: "user", "coinLib", "osiLib", "osiClpLib", and "clpLib" (solver
library).

If you want to use another solver:

-- If you want to use the solver again through the OSI interface, change the 
preprocessor definition in both projects from "__OSI_CLP__" to "__OSI_XXX__", 
where "XXX" is replaced by the desired solver's acronym ("__OSI_CPLEX__", 
"__OSI_GLPK__", "__OSI_OSL__", etc.). Otherwise, change it to either  
"__CPLEX__" or "__OSL__" in both projects since SYMPHONY is able to use 
CPLEX and OSL solvers directly.

-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_CPLEX__", define C:\COIN\Osi\OsiCpx and 
"C:\ILOG\cplex81\include\ilcplex" (assuming CPLEX is installed here) as the 
solver's include files path definitions or if you want to use "__OSI_OSL__", 
define C:\COIN\Osi\OsiOsl and C:\ProgramFiles\IbmOslV3Lib\osllib (assuming 
OSL is installed here) instead of the OSI CLP and CLP path definitions.
If you want to use the native CPLX or OSL interface directly, delete all the 
path definitions (you are not required to have COIN and OSI), and just add the
path definitions for the CPLEX or OSL include files.

-- Add the appropriate libraries to the "symphony" project. For instance, if
you want to use "__OSI_OSL__", then add the osiOslLib and oslmd6030 (OSL solver
library) files after deleting osiClpLib and clpLib libraries from
the "symphony" project. If you want to use the native OSL interface, 
then delete all the libraries (except the "user" library ) from the 
"symphony" project and just add the "oslmd6030" library file for it is the 
unique solver library file we need now.

4. By default, SYMPHONY is also set up to use the COIN CGL library for
generating cuts. To use CGL, the "symphony" project has the "ADD_CGL_CUTS"
preprocessor definition, the path to C:\COIN\Cgl\ (be sure that this path
directs SYMPHONY to the include directory of CGL) and a dependence on the
"cglLib" library. If you also don't want to use the CGL library, simply delete
the "ADD_CGL_CUTS" preprocessor definition, the path definition for the CGL 
include files and the "cglLib" library from the "symphony" project.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: when using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
SYMPHONY-5.0/Makefile, a Unix-style makefile included with the
distribution. To enable the functionality associated with a particular
definition, simply add it to the list of definitions, as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the directory
containing symphony.exe or add the path to the "PATH" Windows environment
variable.

8. Once you have the proper settings for your LP solver, choose "Build
symphony.exe" from the Build menu. This should successfully build the
executable.

9. To test the executable, right click on the symphony project, go to the
"Debug" tab and set the program arguments to "-F sample.mps" Note that
command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.

*******************************************************************************
*                 QUICK START DEVELOPMENT GUIDE (UNIX)                        *
*******************************************************************************

Developing a simple branch and bound solver that can read in instance data in
a custom format is straightforward using the template provided in the
USER directory. The simplest approach is to develop a sequential application, 
sharing a single user data structure among all the modules. Using
this approach, an application can be developed by filling in only a few simple
functions. Here are some steps to make the most common custom modifications.

1. Decide what run-time parameters you might need and what data has to be
stored to describe your instance. Edit the file USER/include/user.h, adding 
the appropriate fields to the user_parameter and user_problem structures to 
store the relevant values.

2. Now edit the file USER/Master/user_master.c. Only two functions need to be 
filled out initially in order to read in your data files
in a custom format. The function user_io() is where you can read in the
instance data, if it is in something other than MPS format (a TSPLIB file, for
example). Note that the name of the file to read the instance data from can be
specified on the command line using the "-F" option by default. Also, you'll
probably need to modify the user_initialize_root_node() function to set up the
root node.

3. Edit the file USER/LP/user_lp.c. The function user_create_subproblem() must 
be filled out. This is the most important function, as it sets up the initial 
LP relaxation in each search node.

4. You may also want to add some problem-specific cutting planes by modifying
the user_find_cuts() function.

Now compile by typing "make" again and that's it! You should now have a
working branch and bound solver. Next you can work on filling in more advanced
functions and adding cutting planes. See the documentation for more
information on this.

*******************************************************************************
*               QUICK START DEVELOPMENT GUIDE (Microsoft Windows)             *
*******************************************************************************

Developing a simple branch and bound solver that can read in instance data in
a custom format is straightforward using the template provided in the
SYMPHONY-5.0\USER\ directory. The simplest approach is to develop a sequential
application, sharing a single user data structure among all the modules. Using
this approach, an application can be developed by filling in only a few simple
functions. Here are some steps to make the most common custom modifications.

1. Decide what run-time parameters you might need and what data has to be
stored to describe your instance. Edit the file
SYMPHONY-5.0\USER\include\user.h, adding the appropriate fields to the
user_parameter and user_problem structures to store the relevant values.

2. Now edit the file SYMPHONY-5.0\USER\Master\user_master.c. Only two
functions need to be filled out initially in order to read in your data files
in a custom format. The function user_io() is where you can read in the
instance data, if it is in something other than MPS format (a TSPLIB file, for
example). Note that the name of the file to read the instance data from can be
specified on the command line using the "-F" option by default. Also, you'll
probably need to modify the user_initialize_root_node() function to set up the
root node.

3. Edit the file SYMPHONY-5.0\USER\LP\user_lp.c. The function
user_create_subproblem() must be filled out. This is the most important
function, as it sets up the initial LP relaxation in each search node.

4. You may also want to add some problem-specific cutting planes by modifying
the user_find_cuts() function.

Now build again and you have a working branch and bound solver! Next you can
work on filling in more advanced functions and adding cutting planes. See the
documentation for more information on this.

*******************************************************************************
*                           SAMPLE APPLICATIONS                               *
*******************************************************************************

There are now a number of sample applications available as examples of how to
do development with SYMPHONY. These include solvers for the matching problem,
the set partitioning problem (simple and advanced versions), the vehicle
routing and traveling salesman problems, and the mixed postman problem. These
applications are distributed as separate packages and can be downloaded from
www.branchandcut.org. There is a white paper that guides the user through the
development of the matching solver.

AUTHORS

SYMPHONY was jointly developed by Ted Ralphs (tkralphs@lehigh.edu) and Laci
Ladanyi (ladanyi@us.ibm.com). Menal Guzelsoy (megb@lehigh.edu) helped with
development, documentation, and debugging of SYMPHONY 4.0.

BUG REPORTS

Bug reports should be sent to symphony-bugs@branchandcut.org.

