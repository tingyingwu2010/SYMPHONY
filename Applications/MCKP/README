******************************************************************************
*                     SYMPHONY MCKP Application                             * 
******************************************************************************

The SYMPHONY MCKP application solves the multi-criteria knapsack problem. This
application is intended as a basic illustration of how to use the
multicriteria solver of SYMPHONY. For another solver that uses the
multicriteria capability in a more sophisticated fashion, please download the
SYMPHONY CNRP application.

******************************************************************************
*              COMPILING THE SYMPHONY MCKP APPLICATION (Unix)               *
******************************************************************************

This version of the SYMPHONY MCKP application is intended to work with
SYMPHONY-5.0. First, configure and compile SYMPHONY 5.0 as described in
SYMPHONY-5.0/README-5.0.  Download and unpack the source code for the MCKP
application from the file SYMPHONY-MCKP-5.0.tgz. Modify the variables in the
MCKP-5.0/Makefile appropriately. In particular, you must set the path to 
SYMPHONY root directory. Other than that, unless you haven't created the 
SYMPHONY callable library as static, you will also need to define the variable 
indicating which LP solver the SYMPHONY callable library is currently using 
and set the appropriate paths to that LP solver's include and library files. 
Besides, you have to do the same procedure for COIN, if used. After the
configuration, typing "make" in the MCKP subdirectory should successfully make 
the executable "mckp". See usage below.

******************************************************************************
*            COMPILING THE SYMPHONY MCKP APPLICATION (Windows)              *
******************************************************************************

This version of the SYMPHONY MCKP application is intended to work with
SYMPHONY-5.0. Here is a sketch outline of how to compile the SYMPHONY MCKP
application in Microsoft Windows. Direct support is provided for compilation
under MS Visual Studio 6.0. Compilation for other compilers should also be
possible. Note that the Windows version has some limitations. Detailed timing
information is not currently provided. Support is only provided for running
in sequential mode at this time.

First, download SYMPHONY-5.0.zip and unzip the archive. This will create a
subdirectory called SYMPHONY-5.0 containing all the source files. Configure 
and compile SYMPHONY 5.0 as described in SYMPHONY-5.0/README-5.0 to create 
the SYMPHONY callable library. There are two options. You can either compile 
on the command-line, using the MSVC++ makefile, MCKP-5.0\WIN32\mckp.mak, or 
you can use the provided workspace. Compiling on the command-line is somewhat 
easier since it requires only editing the makefile and typing a single command.

******************** Using the NMAKE Utility *********************************

1. Edit the MCKP-5.0\WIN32\mckp.mak makefile to reflect your environment. 
This only involves setting the path to SYMPHONY. Only minor edits should be 
required. An explanation of what has to be set is contained in the comments 
in the makefile.

2. Once configuration is done, type "nmake /f mckp.mak" in the 
MCKP-5.0\WIN32 directory. The executable "mckp.exe" will be created under 
the MCKP-5.0\WIN32\Debug directory.

5. To test the executable, type "mckp.exe -F ..\..\sample.mckp -T 3" at a 
command prompt from the MCKP-5.0\WIN32\Debug directory.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace 
SYMPHONY-5.0\MCKP-5.0\WIN32\mckp.dsw. See that it includes the "mckp" project 
which compiles application's main function, links it with the SYMPHONY 
callable library and creates the executable: "mckp.exe".

2. Note that current configuration includes the SYMPHONY callable library 
"symphonyLib", and the paths to the include files of SYMPHONY and of the 
application: "C:\SYMPHONY\include", "..\include". If you have
different locations for these files, make sure that you have set the correct 
paths before compiling.

3. Once you have the proper settings, choose "Build mckp.exe" from the Build 
menu. This should successfully build the executable.

9. To test the executable, right click on the "mckp" project, go to the
"Debug" tab and set the program arguments to "-F ..\sample.mckp -T 3". 
Note that command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.

*******************************************************************************
*                      USING THE SOLVER                                       *
*******************************************************************************

To execute the MCKP application, just specify the location of the data file by
typing "-F 'filename' -T 'format'" as an argument after the executable
name. The last argument is the file format and there are three different
formats that the parser can read. There is a sample file called "sample.mckp"
that you can try to make sure the solver is working. The sample file is in
format 3. More data files may become available. Please check
http://www.branchandcut.org/MCKP/data for more information. The user-defined
parameters are the following:

		-H: help (user switches)
		-F file: problem instance data is in 'file'
                -T format: a number between 1 and 3 that specifies the 
                           file format.

You can also obtain the above list by tying the executable name followed by
"-H". There are a number of other (for now) undocumented parameters that can
be used to fine-tune the performance of the solver. These must be set in a
parameter file. The SYMPHONY User's Manual explains the use of the parameter
file.

Some of SYMPHONY's native parameters can also be set on the command
line. Below is a list of these parameters. This list can also be obtained by
typing the executable name with no command-line arguments. Note that all
SYMPHONY parameters are denoted by a lowercase letter. Note that there are
dozens of other parameters that can be set with the use of a parameter
file. These parameters are listed in the SYMPHONY User's Manual.

		-h: help
        	-a: no cut timeout
        	-d: enable graph drawing
        	-g: use cut generator
        	-r: do repricing in root
        	-t: trim the tree
        	-b: don't perform branch and cut
        	-u ub: use upper bound 'ub'
        	-p procs: allow 'procs' active nodes
        	-n i: use node selection rule 'i'
        	-v i: set verbosity to level 'i'
        	-s cands: use 'cands' candidates for strong branching
        	-c i: use rule 'i' to compare candidates
        	-k i: use rule 'i' to select child
        	-m n: allow a max of 'n' cuts to enter per iteration
        	-e n: allow a max of 'n' cut pools
        	-l n k: load balance level 'n' and iterations 'k'
        	-i n: allow a max of 'n' iterations in presolve
        	-z n: set diving threshold to 'n'
        	-f file: read parameters from parameter file 'file'

AUTHORS

The SYMPHONY MCKP application was developed by Ted Ralphs.
(tkralphs@lehigh.edu).

BUG REPORTS

Please send bug reports to symphony-bugs@branchandcut.org.
