SYMPHONY MCKP-5.1 APPLICATION INSTALLATION
==========================================

******************************************************************************
*              COMPILING THE SYMPHONY MCKP APPLICATION (Unix)               *
******************************************************************************

First, configure and compile SYMPHONY as described in SYMPHONY/README Modify
the variables in the MCKP/Makefile appropriately. In particular, you must
set the path to SYMPHONY root directory. Other than that, unless you haven't
created the SYMPHONY callable library as static, you will also need to define
the variable indicating which LP solver the SYMPHONY callable library is
currently using and set the appropriate paths to that LP solver's include and
library files. Besides, you have to do the same procedure for COIN, if used.
After the configuration, typing "make" in the MCKP subdirectory should
successfully make the executable "mckp". See usage below.

******************************************************************************
*            COMPILING THE SYMPHONY MCKP APPLICATION (Windows)              *
******************************************************************************

Here is a sketch outline of how to compile the SYMPHONY MCKP application in
Microsoft Windows. Direct support is provided for compilation under MS Visual
Studio 6.0. Compilation for other compilers should also be possible. Note that
the Windows version has some limitations. Detailed timing information is not
currently provided. Support is only provided for running in sequential mode at
this time.

Configure and compile SYMPHONY as described in SYMPHONY/README to
create the SYMPHONY callable library. There are two options. You can either
compile on the command-line, using the MSVC++ makefile, src\WIN32\mckp.mak, 
or you can use the provided workspace. Compiling on the command-line is 
somewhat easier since it requires only editing the makefile and typing a 
single command.

******************** Using the NMAKE Utility *********************************

1. Edit the src\WIN32\mckp.mak makefile to reflect your environment. 
This only involves setting the path to SYMPHONY. Only minor edits should be 
required. An explanation of what has to be set is contained in the comments 
in the makefile.

2. Once configuration is done, type "nmake /f mckp.mak" in the src\WIN32 
directory. The executable "mckp.exe" will be created under the src\WIN32\Debug 
directory.

3. To test the executable, type "mckp.exe -F ..\..\sample.mckp -T 3" at a 
command prompt from the src\WIN32\Debug directory.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace src\WIN32\mckp.dsw. See that it 
includes the "mckp" project which compiles application's main function, links 
it with the SYMPHONY callable library and creates the executable: "mckp.exe".

2. Note that current configuration includes the SYMPHONY callable library 
"symphonyLib", and the paths to the include files of SYMPHONY and of the 
application: "..\..\..\include", "..\include". If you have
different locations for these files, make sure that you have set the correct 
paths before compiling.

3. Once you have the proper settings, choose "Build mckp.exe" from the Build 
menu. This should successfully build the executable.

4. To test the executable, right click on the "mckp" project, go to the
"Debug" tab and set the program arguments to "-F ..\sample.mckp -T 3".
Note that command-line switches are Unix-style.

5. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.
