*******************************************************************************
*                      SYMPHONY SPP+CUTS Application                          *
*******************************************************************************

The SYMPHONY SPP+CUTS application solves the standard Set Partitioning
Problem. This application utilizes cutting planes. For a more basic solver
that illustrates how to solve the SPP with branch and bound, please download
the SYMPHONY SPP application. See below for usage.

*******************************************************************************
*            COMPILING THE SYMPHONY SPP+CUTS APPLICATION (Unix)               *
*******************************************************************************

First, configure and compile SYMPHONY as described in SYMPHONY/README. Modify
the variables in the SPP+CUTS/Makefile appropriately. In particular, you
must set the path to SYMPHONY itself. If the application is unpacked as a
subdirectory of SYMPHONY root directory, no further modification should be
necessary. Typing "make" in the SPP+CUTS subdirectory should successfully make
the executable "spp". It will be installed in the directory
SPP+CUTS/bin/$(ARCH)/$(LP\_SOLVER). Otherwise, you must also set the path
to the application's files. See usage below.

******************************************************************************
*          COMPILING THE SYMPHONY SPP+CUTS APPLICATION (Windows)              *
******************************************************************************

Here is a sketch outline of how to compile the SYMPHONY SPP+CUTS application
in Microsoft Windows. Direct support is provided for compilation under MS
Visual Studio 6.0. Compilation for other compilers should also be possible.
Note that the Windows version has some limitations. Detailed timing
information is not currently provided. Support is only provided for running in
sequential mode at this time.

There are two options. You can either compile on the command-line, using the
MSVC++ makefile, SPP+CUTS\src\WIN32\spp_with_cuts.mak, or you can use the
provided projects and workspaces. However for the second option, it is
important the SPP+CUTS archive be unpacked in the SYMPHONY root directory or
the project files will not work. Compiling on the command-line is somewhat
easier since it requires only editing the makefile and typing a single
command.

******************** Using the NMAKE Utility *********************************

1. Edit the SPP+CUTS\src\WIN32\spp_with_cuts.mak makefile to reflect your 
environment. This involves specifying the LP solver to be used, assigning some 
variables and setting various paths. Only minor edits should be required. 
An explanation of what has to be set is contained in the comments in the 
makefile.

2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries, available from www.coin-or.org. By default, SYMPHONY is 
set to use COIN LP solver, CLP, COIN Open Solver Interface, OSI and
COIN Cut Generation Library, CGL. To keep this configuration, you should 
install OSI, CGL, CLP and the Coin utilities (under COIN\Coin). The path to 
the COIN libraries must be specified in the makefile.

3. If you wish to read GMPL/AMPL files, you will have to install the Gnu
Linear Programming Kit (GLPK), which contains a parser for GMPL/AMPL
files. The path to the GLPK libraries must be specified in the makefile.

4. Once configuration is done, type "nmake /f spp_with_cuts.mak" in the 
SPP+CUTS\src\WIN32 directory. The executable "spp_with_cuts.exe" will be 
created under SPP+CUTS\src\WIN32\Debug subdirectory.

5. To test the executable, type "spp_with_cuts.exe -F ..\..\..\sample.spp" at a
command prompt from the SPP+CUTS\src\WIN32\Debug directory.

******************** Using the MSVC++ Workspace ******************************

1. In MS Visual C++ 6.0, open the workspace
SYMPHONY\Applications\SPP+CUTS\src\WIN32\spp_with_cuts.dsw.Note that there are
two projects, one called "spp_with_cuts" and the other called "symphonyLib".
The "symphonyLib" project compiles the source code, with the calls to the
user-defined callbacks used to customize the solver, to create the callable
library: "symphonyLib.lib". The "spp_with_cuts" project compiles those user
callbacks together with the main and the application functions, links them
with the callable library and creates the executable: "spp_with_cuts.exe".
 
2. To use many of the new capabilities of SYMPHONY, you must have installed
the COIN libraries. Specifically, you should install OSI, CGL, CLP and the Coin
utilities (in the COIN/Coin directory). These can be downloaded from 
www.coin-or.org. The default location for COIN is C:\COIN\.

3. By default, SYMPHONY is set to use the OSI CLP interface. To see this
check the following settings:

-- "__OSI_CLP__" is defined in the preprocessor definitions of both
"symphonyLib" and "spp_with_cuts" projects (right-click on one of the 
projects, and then choose Settings --> C/C++ --> Preprocessor in the category 
drop-down menu).

-- Paths to the include files of COIN utilities (Coin), OSI, OSI CLP, and
CLP are specified in the same settings window as for the preprocessor
definitions. Note that, the Coin, OSI, OSI_CLP and CLP include directories are
assumed to be in C:\COIN\Coin, C:\COIN\Osi, C:\COIN\Osi\OsiClp and
C:\COIN\Clp directories, respectively. If they are not,
make sure that you have set the correct paths in both projects before
compiling.

-- The "spp_with_cuts" project is dependent on the "symphonyLib" project 
(see the dependencies in Project --> Dependencies) and it includes the 
necessary libraries: "symphonyLib", "coinLib", "osiLib", "osiClpLib", and 
"clpLib" (solver library).

If you want to use another solver:

-- If you want to use the solver again through the OSI interface, change the 
preprocessor definition in both projects from "__OSI_CLP__" to "__OSI_XXX__", 
where "XXX" is replaced by the desired solver's acronym ("__OSI_CPLEX__", 
"__OSI_GLPK__", "__OSI_OSL__", etc.). Otherwise, change it to either  
"__CPLEX__" or "__OSL__" in both projects since SYMPHONY is able to use 
CPLEX and OSL solvers directly.

-- Change the path definitions of the include files: for instance, if you want
to use "__OSI_CPLEX__", define C:\COIN\Osi\OsiCpx and 
"C:\ILOG\cplex81\include\ilcplex" (assuming CPLEX is installed here) as the 
solver's include files path definitions or if you want to use "__OSI_OSL__", 
define C:\COIN\Osi\OsiOsl and C:\ProgramFiles\IbmOslV3Lib\osllib (assuming 
OSL is installed here) instead of the OSI CLP and CLP path definitions.
If you want to use the native CPLX or OSL interface directly, delete all the 
path definitions (you are not required to have COIN and OSI), and just add the
path definitions for the CPLEX or OSL include files.

-- Add the appropriate libraries to the "spp_with_cuts" project. For instance, 
if you want to use "__OSI_OSL__", then add the "osiOslLib" and "oslmd6030" 
(OSL solver library) files after deleting "osiClpLib" and "clpLib" 
dependencies from the project. If you want to use the native OSL interface, 
then delete all the libraries (except the "symphonyLib") and just add the 
"oslmd6030" library for it is the unique solver library we need now.

4. By default, SYMPHONY is also set to use the COIN CGL library for
generating cuts. To use CGL, the "symphonyLib" project has the "ADD_CGL_CUTS"
preprocessor definition and the path to C:\COIN\Cgl\ (be sure that this path
directs SYMPHONY to the include directory of CGL). If you also don't want to 
use the CGL library, simply delete the "ADD_CGL_CUTS" preprocessor definition, 
the path definition for the CGL include files and the "cglLib" library from 
the "spp_with_cuts" project.

5. DO NOT CHANGE COMPILER DEFINES NOT RELATED TO THE LP SOLVER. Important note
for OSL users: when using OSL in Windows, you must also add "OSLMSDLL" to the
list of definitions.

6. Note that there are a number of additional preprocessor definitions that
control the functionality of SYMPHONY. These definitions are described in
SYMPHONY/Makefile, a Unix-style makefile included with the
distribution. To enable the functionality associated with a particular
definition, simply add it to the list of definitions, as above.

7. You must also be sure to have any .dll files required for your LP solver to
be in your search path. Either move the required .dll to the directory
containing "spp_with_cuts.exe" or add the path to the "PATH" Windows 
environment variable.

8. Once you have the proper settings for your LP solver, choose "Build
spp_with_cuts.exe" from the Build menu. This should successfully build the
executable.

9. To test the executable, right click on the "spp_with_cuts" project, go to
the "Debug" tab and set the program arguments to "-F ..\..\..\sample.spp" Note
that command-line switches are Unix-style.

10. Now choose "Execute" from the build menu and the solver should solve the
sample problem.

Note that there is some functionality missing from the Windows version. Most
prominently, the timing functions do not work. This functionality should be
easy to add -- let me know if you are interested in doing it and I will give
you all the help I can. In addition, the Windows version will only run in
sequential mode for a variety of reasons. However, it should be relatively
easy to get it running in parallel if you can get PVM working under
Windows. Let me know if you are interested.

*******************************************************************************
*                      USING THE SOLVER                                       *
*******************************************************************************

The set partitioning problem (SPP) is a difficult (NP-complete, large size of
problems) combinatorial optimization problem mainly applied to scheduling
problems. SPP can be defined as finding the minimum cost partition of a matrix
having binary entities where a partition is the union of disjoint subsets to
cover all the row indices and a subset -associated to each column- consists of
the row indices if the corresponding entity is 1.

To execute the SPP+CUTS application you are just required to specify the
location of the data file by typing "-F 'filename'" as an argument after the
executable name. There is a sample file called sample.spp that you can try to
make sure the solver is working. More data files may become available. Please
check http://www.branchandcut.org/SPP+CUTS/ for more information. 
The other user defined parameters are the following:

		-H: help (user switches)
		-F file: problem instance data is in 'file'

You can also obtain the above list by tying the executable name followed by
"-H". There are a number of other (for now) undocumented parameters that can
be used to fine-tune the performance of the solver. These must be set in a
parameter file. The SYMPHONY User's Manual explains the use of the parameter
file.

Some of SYMPHONY's native parameters can also be set on the command
line. Below is a list of these parameters. This list can also be obtained by
typing the executable name with no command-line arguments. Note that all
SYMPHONY parameters are denoted by a lowercase letter. Note that there are
dozens of other parameters that can be set with the use of a parameter
file. These parameters are listed in the SYMPHONY User's Manual.

		-h: help
        	-a: no cut timeout
        	-d: enable graph drawing
        	-g: use cut generator
        	-r: do repricing in root
        	-t: trim the tree
        	-b: don't perform branch and cut
        	-u ub: use upper bound 'ub'
        	-p procs: allow 'procs' active nodes
        	-n i: use node selection rule 'i'
        	-v i: set verbosity to level 'i'
        	-s cands: use 'cands' candidates for strong branching
        	-c i: use rule 'i' to compare candidates
        	-k i: use rule 'i' to select child
        	-m n: allow a max of 'n' cuts to enter per iteration
        	-e n: allow a max of 'n' cut pools
        	-l n k: load balance level 'n' and iterations 'k'
        	-i n: allow a max of 'n' iterations in presolve
        	-z n: set diving threshold to 'n'
        	-f file: read parameters from parameter file 'file'

AUTHORS

The SYMPHONY SPP+CUTS application was developed by Marta Eso
(meso@hotchkiss.org).

BUG REPORTS

Please send bug reports to symphony-bugs@branchandcut.org.
